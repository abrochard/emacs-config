#+TITLE: Snippets Collection
#+AUTHOR: org-sync-snippets

* emacs-lisp-mode

** data argument

#+BEGIN_SRC snippet :tangle {SNIPPETS-DIR}/emacs-lisp-mode/data argument
  # -*- mode: snippet -*-
  # name: data argument
  # key: arg
  # --
  ("$1" . "$2")
#+END_SRC

** message

#+BEGIN_SRC snippet :tangle {SNIPPETS-DIR}/emacs-lisp-mode/message
  # -*- mode: snippet -*-
  # name: message
  # key: msg
  # --
  (message "%s" $1)
#+END_SRC

** package

#+BEGIN_SRC snippet :tangle {SNIPPETS-DIR}/emacs-lisp-mode/package
  # -*- mode: snippet -*-
  # name: package
  # key: pack
  # --
  ;;; package --- Summary

  ;;; Commentary:

  ;;; Code:

  $0

  (provide '`(file-name-sans-extension (f-filename (buffer-file-name)))`)
  ;;; `(f-filename (buffer-file-name))` ends here

#+END_SRC

** request

#+BEGIN_SRC snippet :tangle {SNIPPETS-DIR}/emacs-lisp-mode/request
  # -*- mode: snippet -*-
  # name: request
  # key: req
  # --
  (request
   "$1"
   :type "$2"
   :headers '(("Authorization" . "Bearer $3"))
   :parser 'buffer-string
   :complete (cl-function
              (lambda (&key data &allow-other-keys)
                (with-output-to-temp-buffer "*request*"
                  (princ data)
                  (switch-to-buffer "*request*")
                  (json-pretty-print-buffer)))))
#+END_SRC

* go-mode

** fmt

#+BEGIN_SRC snippet :tangle {SNIPPETS-DIR}/go-mode/fmt
  # -*- mode: snippet -*-
  # name: fmt
  # key: fmt
  # --
  fmt.Printf("\n\n[ADRIEN] $1 %+v\n\n", $1)$0
#+END_SRC

** iferr

#+BEGIN_SRC snippet :tangle {SNIPPETS-DIR}/go-mode/iferr
  # -*- mode: snippet -*-
  # name: iferr
  # key: iferr
  # --
  if err != nil {
     $1
  }
#+END_SRC

** return

#+BEGIN_SRC snippet :tangle {SNIPPETS-DIR}/go-mode/return
  # -*- mode: snippet -*-
  # name: return
  # key: r
  # --
  return $0
#+END_SRC

* js2-mode

** console

#+BEGIN_SRC snippet :tangle {SNIPPETS-DIR}/js2-mode/console.log
  # -*- mode: snippet -*-
  # name: console.log
  # key: log
  # --
  console.log($1);
#+END_SRC

** fct

#+BEGIN_SRC snippet :tangle {SNIPPETS-DIR}/js2-mode/fct
  # -*- mode: snippet -*-
  # name: fct
  # key: f
  # --
  ($1) => {$0}
#+END_SRC

* org-mode

** use-package

#+BEGIN_SRC snippet :tangle {SNIPPETS-DIR}/org-mode/use-package
  # -*- mode: snippet -*-
  # name: use-package
  # key: use
  # --
  ** Enable =$1=
  #+BEGIN_SRC emacs-lisp
    (use-package $1)
  #+END_SRC
#+END_SRC

* php-mode

** dictionary entry

#+BEGIN_SRC snippet :tangle {SNIPPETS-DIR}/php-mode/dictionary entry
  # -*- mode: snippet -*-
  # name: dictionary entry
  # key: dic
  # --
  '$1' => '$2',
#+END_SRC

** do while

#+BEGIN_SRC snippet :tangle {SNIPPETS-DIR}/php-mode/do while
  # -*- mode: snippet -*-
  # name: do while
  # key: do
  # --
  do {
     $1
  } while ($2);
#+END_SRC

** export

#+BEGIN_SRC snippet :tangle {SNIPPETS-DIR}/php-mode/export
  # -*- mode: snippet -*-
  # name: export
  # key: export
  # --
  echo '<pre>' . var_export($1, true) . '</pre>';
#+END_SRC

** for loop

#+BEGIN_SRC snippet :tangle {SNIPPETS-DIR}/php-mode/for loop
  # -*- mode: snippet -*-
  # name: for loop
  # key: for
  # --
  for ($1 = 0; $1 < $2; $1++) {
      $3
  }
#+END_SRC

** foreach

#+BEGIN_SRC snippet :tangle {SNIPPETS-DIR}/php-mode/foreach
  # -*- mode: snippet -*-
  # name: foreach
  # key: foreach
  # --
  foreach ($1 as $2 => $3) {
          $4
  }
#+END_SRC

** function

#+BEGIN_SRC snippet :tangle {SNIPPETS-DIR}/php-mode/function
  # -*- mode: snippet -*-
  # name: function
  # key: fct
  # --
  /**
   * $1
   *
   * @param $2 $3
   * @return $4
   */
  $5 function $1($3)
  {
      $6
  }
#+END_SRC

** header

#+BEGIN_SRC snippet :tangle {SNIPPETS-DIR}/php-mode/header
  # -*- mode: snippet -*-
  # name: header
  # key: header
  # --
  /**
  * $1
  * $0
  * @return $2
  */
#+END_SRC

** implode

#+BEGIN_SRC snippet :tangle {SNIPPETS-DIR}/php-mode/implode
  # -*- mode: snippet -*-
  # name: implode
  # key: implode
  # --
  implode($1, $2)
#+END_SRC

** namespace

#+BEGIN_SRC snippet :tangle {SNIPPETS-DIR}/php-mode/namespace
  # key: namespace
  # name: namespace
  # --
  namespace `(replace-regexp-in-string ".$" ";" (replace-regexp-in-string "^." "" (replace-regexp-in-string "/" "\\" (file-name-directory (buffer-file-name)) t t)))`
#+END_SRC

** return

#+BEGIN_SRC snippet :tangle {SNIPPETS-DIR}/php-mode/return
  # -*- mode: snippet -*-
  # name: return
  # key: ret
  # --
  return $1;
#+END_SRC

** try catch

#+BEGIN_SRC snippet :tangle {SNIPPETS-DIR}/php-mode/try catch
  # -*- mode: snippet -*-
  # name: try catch
  # key: try
  # --
  try {
      $1
  } catch ($2 $e) {
      $3
  }
#+END_SRC

** var dump

#+BEGIN_SRC snippet :tangle {SNIPPETS-DIR}/php-mode/var dump
  # -*- mode: snippet -*-
  # name: var dump
  # key: dump
  # --
  var_dump($1); exit;
#+END_SRC

** while

#+BEGIN_SRC snippet :tangle {SNIPPETS-DIR}/php-mode/while
  # -*- mode: snippet -*-
  # name: while
  # key: w
  # --
  while ($1) {
        $2
  }
#+END_SRC

* python-mode

** class

#+BEGIN_SRC snippet :tangle {SNIPPETS-DIR}/python-mode/class
  # -*- mode: snippet -*-
  # name: class
  # key: class
  # --
  class `(s-upper-camel-case (f-no-ext (f-filename (buffer-file-name))))`:
      def __init__(self, $2):
          self.$2 = $2

      $0

#+END_SRC

** def

#+BEGIN_SRC snippet :tangle {SNIPPETS-DIR}/python-mode/def
  # -*- mode: snippet -*-
  # name: def
  # key: def
  # --
  def $1($2):
      $0
#+END_SRC

** dic

#+BEGIN_SRC snippet :tangle {SNIPPETS-DIR}/python-mode/dic
  # -*- mode: snippet -*-
  # name: dic
  # key: dic
  # --
  '$1': '$2',
#+END_SRC

** for

#+BEGIN_SRC snippet :tangle {SNIPPETS-DIR}/python-mode/for
  # -*- mode: snippet -*-
  # name: for
  # key: for
  # --
  for $1 in $2:
      $0
#+END_SRC

** if

#+BEGIN_SRC snippet :tangle {SNIPPETS-DIR}/python-mode/if
  # -*- mode: snippet -*-
  # name: if
  # key: if
  # --
  if $1:
      $0
#+END_SRC

** p

#+BEGIN_SRC snippet :tangle {SNIPPETS-DIR}/python-mode/p
  # -*- mode: snippet -*-
  # name: p
  # key: p
  # --
  print('Value of $1 is "{}"'.format($1))
#+END_SRC
