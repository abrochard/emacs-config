#+TITLE: Emacs Configuration
#+AUTHOR: Adrien Brochard

* How to use
The =.emacs= file in home directory should only contain
#+BEGIN_SRC emacs-lisp :tangle no
(load-file "~/emacs-config/bootstrap.el")
#+END_SRC
where the path to bootstrap.el is adjusted to wherever you cloned this repo.
This will also automatically pull the latest version of the config on startup, unless you forbid it with
#+BEGIN_SRC emacs-lisp :tangle no
(setq config-no-auto-update t)
#+END_SRC

* Add Package Repositories
#+BEGIN_SRC emacs-lisp
(require 'package)
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
(add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/") t)
(package-initialize)
#+END_SRC

* Security
Inspired by [[https://ogbe.net/emacsconfig.html][ogbe.net]] and [[https://glyph.twistedmatrix.com/2015/11/editor-malware.html][Your Text Editor Is Malware]].
** Check TLS
#+BEGIN_SRC emacs-lisp
  (setq tls-checktrust t)
  (setq gnutls-verify-error t)
#+END_SRC
** TODO Do more with local certs and check bad ssl


* Automatic package installation
** Install =use-package=
And its dependencies if needed.
#+BEGIN_SRC emacs-lisp
(mapc
 (lambda (package)
   (if (not (package-installed-p package))
       (progn
         (package-refresh-contents)
         (package-install package))))
 '(use-package diminish bind-key))
#+END_SRC
** Trigger =use-package=
And force the install of missing packages.
#+BEGIN_SRC emacs-lisp
(eval-when-compile
  (require 'use-package))
(require 'diminish)
(require 'bind-key)
(setq use-package-always-ensure t)
#+END_SRC

* Configure Helm
** Make everything fuzzy and also rebind functions.
#+BEGIN_SRC emacs-lisp
  (use-package flx)
  (use-package helm-flx)
  (use-package helm
    :demand
    :diminish helm-mode
    :bind (("M-x" . helm-M-x)
           ("M-y" . helm-show-kill-ring)
           ("C-x b" . helm-mini)
           ("C-x C-f" . helm-find-files)
           ("C-x r l" . helm-bookmarks)
           ("C-c s" . helm-occur)
           :map helm-find-files-map ;; I like these from Ido
           ("C-<tab>"         . helm-execute-persistent-action)
           ("C-<backspace>" . helm-find-files-up-one-level))
    :config
    (helm-mode 1)
    (helm-flx-mode +1)
    (setq helm-M-x-fuzzy-match t)
    (setq helm-locate-fuzzy-match t)
    (setq helm-lisp-fuzzy-completion t)
    (setq helm-bookmark-show-location t)
    (setq helm-buffer-max-length 30))
#+END_SRC
** Imenu + Helm with =imenu-anywhere=
But I find pulling from other buffer confusing so I limit to current buffer
#+BEGIN_SRC emacs-lisp
  (defun imenu-anywhere-same-buffer-p (current other)
    (eq current other))

  (use-package imenu-anywhere
    :bind (("C-c C-i" . helm-imenu-anywhere))
    :config (setq imenu-anywhere-buffer-filter-functions
                  '(imenu-anywhere-same-buffer-p)))
#+END_SRC
** Install =helm-system-packages=
#+BEGIN_SRC emacs-lisp
  (use-package helm-system-packages)
#+END_SRC


* Version Control
For now it's just git, but can add more systems as necessary.
** Enable magit
Best git client
#+BEGIN_SRC emacs-lisp
(use-package magit
  :bind ("C-x g" . magit-status))
#+END_SRC
** Enable =forge=
For interactions with github.
#+begin_src emacs-lisp
  (use-package forge)
#+end_src
** Add =git-timemachine=
#+BEGIN_SRC emacs-lisp
  (use-package git-timemachine)
#+END_SRC
** Add =magit-circleci=
For CircleCI integration
#+begin_src emacs-lisp
  (use-package magit-circleci
    :config (magit-circleci-mode))
#+end_src

* Set personal information
#+BEGIN_SRC emacs-lisp
  (setq user-full-name "Adrien Brochard"
        calendar-latitude 40.7
        calendar-longitude -73.98
        calendar-location-name "New York, NY")
#+END_SRC


* Utility functions
** Generate scratch buffer
#+BEGIN_SRC emacs-lisp
(defun generate-scratch-buffer ()
  "Create and switch to a temporary scratch buffer with a random
     name."
  (interactive)
  (switch-to-buffer (make-temp-name "scratch-")))
#+END_SRC

** Sudo the current buffer
#+BEGIN_SRC emacs-lisp
(defun sudo ()
  "Use TRAMP to `sudo' the current buffer"
  (interactive)
  (when buffer-file-name
    (find-alternate-file
     (concat "/sudo:root@localhost:"
             buffer-file-name))))
#+END_SRC

** Replace JSON web token in buffer
This is regexp based
#+BEGIN_SRC emacs-lisp
(defun replace-token (token)
  "Replace JSON web token for requests"
  (interactive "sEnter the new token: ")
  (save-excursion
    (goto-char (point-min))
    (while (re-search-forward "Bearer .*\"" nil t)
      (replace-match (concat "Bearer " token "\"")))))
#+END_SRC

** Open all marked files in Dired
I like this better than the one in =dired+=
#+BEGIN_SRC emacs-lisp
(eval-after-load "dired"
  '(progn
     (define-key dired-mode-map "F" 'my-dired-find-file)
     (defun my-dired-find-file (&optional arg)
       "Open each of the marked files, or the file under the point, or when prefix arg, the next N files "
       (interactive "P")
       (let* ((fn-list (dired-get-marked-files nil arg)))
         (mapc 'find-file fn-list)))))
#+END_SRC

** Open the current file in browser.
Thanks to [[https://github.com/purcell/emacs.d/blob/master/lisp/init-utils.el#L78]]
#+BEGIN_SRC emacs-lisp
(defun browse-current-file ()
  "Open the current file as a URL using `browse-url'."
  (interactive)
  (let ((file-name (buffer-file-name)))
    (if (and (fboundp 'tramp-tramp-file-p)
             (tramp-tramp-file-p file-name))
        (error "Cannot open tramp file")
      (browse-url (concat "file://" file-name)))))
#+END_SRC

** XML Format function
This works well on short text, too much and it can block the system
#+BEGIN_SRC emacs-lisp
(use-package sgml-mode)

(defun reformat-xml ()
  (interactive)
  (save-excursion
    (sgml-pretty-print (point-min) (point-max))
    (indent-region (point-min) (point-max))))
#+END_SRC

** Refill paragraphs to be on one line
#+BEGIN_SRC emacs-lisp
(defun refill-paragraphs ()
  "fill individual paragraphs with large fill column"
  (interactive)
  (let ((fill-column 100000))
    (fill-individual-paragraphs (point-min) (point-max))))
#+END_SRC

** Copy filename and path to clipboard
Thanks to http://emacsredux.com/blog/2013/03/27/copy-filename-to-the-clipboard/
#+BEGIN_SRC emacs-lisp
(defun copy-filename ()
  "Copy the current buffer file name to the clipboard."
  (interactive)
  (let ((filename (if (equal major-mode 'dired-mode)
                      default-directory
                    (buffer-file-name))))
    (when filename
      (kill-new filename)
      (message "Copied buffer file name '%s' to the clipboard." filename))))
#+END_SRC

** Align docstring
I put a double space in between what I want to align and call this:
#+BEGIN_SRC emacs-lisp
(defun align-docstring ()
  "Align lines by double space"
  (interactive)
  (align-regexp (region-beginning) (region-end) "\\(\\s-*\\)  " 1 1 t))
#+END_SRC

** Rename local variable
#+BEGIN_SRC emacs-lisp
(defun rename-local-var (name)
  (interactive "sEnter new name: ")
  (let ((var (word-at-point)))
    (mark-defun)
    (replace-string var name nil (region-beginning) (region-end))))
#+END_SRC

** Increment/decrement number at point
I miss that from Vim
#+BEGIN_SRC emacs-lisp
  (defun increment-number-at-point ()
    (interactive)
    (skip-chars-backward "0-9")
    (or (looking-at "[0-9]+")
        (error "No number at point"))
    (replace-match (number-to-string (1+ (string-to-number (match-string 0))))))

  (defun decrement-number-at-point ()
    (interactive)
    (skip-chars-backward "0-9")
    (or (looking-at "[0-9]+")
        (error "No number at point"))
    (replace-match (number-to-string (- (string-to-number (match-string 0)) 1))))
#+END_SRC

** Comment a line
Before Emacs 25.1
#+BEGIN_SRC emacs-lisp
  (defun comment-line ()
    (interactive)
    (save-excursion
      (end-of-line)
      (set-mark (point))
      (beginning-of-line)
      (if (comment-only-p (region-beginning) (region-end))
          (uncomment-region (region-beginning) (region-end))
        (comment-region (region-beginning) (region-end)))))
#+END_SRC

** Quickly edit this config file
#+BEGIN_SRC emacs-lisp
  (defun edit-config-file ()
    (interactive)
    (find-file (concat config-load-path "configuration.org")))
#+END_SRC

** Send the current selection in an email
This uses mutt.
#+BEGIN_SRC emacs-lisp
  (defun email-selection ()
    (interactive)
    (copy-region-as-kill (region-beginning) (region-end))
    (let ((tmp-file (concat "/tmp/" (buffer-name (current-buffer))))
          (recipient (read-string "Enter a recipient: "))
          (subject (read-string "Enter a subject: ")))
      (find-file tmp-file)
      (yank)
      (save-buffer)
      (kill-buffer (current-buffer))
      (shell-command (concat "mutt -s \"" subject "\" " recipient " < " tmp-file))
      (shell-command (concat "rm -f " tmp-file)))
    (message "Sent!"))
#+END_SRC

** Move files more intuitively
#+BEGIN_SRC emacs-lisp
  (defun move-file ()
    "Write this file to a new location, and delete the old one."
    (interactive)
    (let ((old-location (buffer-file-name)))
      (call-interactively #'write-file)
      (when old-location
        (delete-file old-location))))
#+END_SRC

** Insert a filename at point
#+BEGIN_SRC emacs-lisp
  (defun insert-filename ()
    (interactive)
    (insert (read-file-name "File:")))
#+END_SRC

** Insert a relative filename at point
#+BEGIN_SRC emacs-lisp
  (defun insert-relative-filename ()
    (interactive)
    (insert (file-relative-name (read-file-name "File: "))))
#+END_SRC

** Format long function parameter list into multiline
#+BEGIN_SRC emacs-lisp
  (defun format-function-parameters ()
    "Turn the list of function parameters into multiline."
    (interactive)
    (beginning-of-line)
    (search-forward "(" (line-end-position))
    (newline-and-indent)
    (while (search-forward "," (line-end-position) t)
      (newline-and-indent))
    (end-of-line)
    (c-hungry-delete-forward)
    (insert " ")
    (search-backward ")")
    (newline-and-indent))
#+END_SRC

** Eshell here
Thanks to Howard https://github.com/howardabrams/dot-files/blob/master/emacs-eshell.org
#+BEGIN_SRC emacs-lisp
  (defun eshell-here ()
    "Opens up a new shell in the directory associated with the
      current buffer's file. The eshell is renamed to match that
      directory to make multiple eshell windows easier."
    (interactive)
    (let* ((height (/ (window-total-height) 3)))
      (split-window-vertically (- height))
      (other-window 1)
      (eshell "new")
      (insert (concat "ls"))
      (eshell-send-input)))

  (bind-key "C-!" 'eshell-here)
#+END_SRC

** Show pwd relative to current project
And copy to clipboard
#+BEGIN_SRC emacs-lisp
  (defun relative-pwd ()
    (interactive)
    (let* ((prj (cdr (project-current)))
           (current-file buffer-file-truename)
           (prj-name (file-name-as-directory (file-name-nondirectory (directory-file-name prj))))
           (output (concat prj-name (file-relative-name current-file prj))))
      (kill-new output)
      (message output)))
#+END_SRC

** Add JIRA ticket number to commit messages
#+BEGIN_SRC emacs-lisp
  (add-hook 'git-commit-setup-hook
      '(lambda ()
          (let ((has-ticket-title (string-match "^[A-Z]+-[0-9]+"
                                      (magit-get-current-branch)))
                (words (s-split-words (magit-get-current-branch))))
            (if has-ticket-title
                (insert (format "[%s-%s] " (car words) (car (cdr words))))))))
#+END_SRC

** Get my public IP
#+begin_src emacs-lisp
  (defun what-is-my-ip ()
    (interactive)
    (message "IP: %s"
             (with-current-buffer (url-retrieve-synchronously "https://api.ipify.org")
               (buffer-substring (+ 1 url-http-end-of-headers) (point-max)))))
#+end_src

** Insert a commit message
Thanks to [[http://whatthecommit.com][whatthecommit.com]]
#+begin_src emacs-lisp
  (defun what-the-commit ()
    (interactive)
    (insert
     (with-current-buffer
         (url-retrieve-synchronously "http://whatthecommit.com")
       (re-search-backward "<p>\\([^<]+\\)\n<\/p>")
       (match-string 1))))
#+end_src
** Instant kill the current buffer
#+begin_src emacs-lisp
  (defun insta-kill-buffer ()
    (interactive)
    (kill-buffer))
  (global-set-key (kbd "C-z") 'insta-kill-buffer)
#+end_src
* Custom key bindings
** Quickly revert a buffer
Useful if file changed on disk
#+BEGIN_SRC emacs-lisp
(define-key global-map (kbd "C-c r") 'revert-buffer)
#+END_SRC

** Quickly evaluate a buffer or a region
#+BEGIN_SRC emacs-lisp
(define-key global-map (kbd "C-c x") 'eval-buffer)
(define-key global-map (kbd "C-c X") 'eval-region)
#+END_SRC

** Use the Mac Style Home/End keys
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "<home>") 'beginning-of-buffer)
(global-set-key (kbd "<end>") 'end-of-buffer)
#+END_SRC

** Quickly turn on auto-fill
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c q") 'auto-fill-mode)
#+END_SRC

** Hungry delete forward available everywhere
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c d") 'c-hungry-delete-forward)
#+END_SRC

** Increment number easily
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c +") 'increment-number-at-point)
  (global-set-key (kbd "C-c -") 'decrement-number-at-point)
#+END_SRC

** Comment the current line
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x C-;") 'comment-line)
#+END_SRC


* Org-mode
** Set environment
#+BEGIN_SRC emacs-lisp
  (use-package f)
  (use-package org)
  (setq org-directory "~/org/")
  (setq org-agenda-files '("~/org"))
#+END_SRC
** Utility functions
#+begin_src emacs-lisp
  (defun org-file-path (filename)
    "Return the absolute address of an org file, given its relative name."
    (concat (file-name-as-directory org-directory) filename))

  (defun org-find-file ()
    "Leverage Helm to quickly open any org files."
    (interactive)
    (find-file (org-file-path (helm-comp-read "Select your org file: " (directory-files org-directory nil "\.org$")))))
#+end_src
** Use syntax highlighting in source blocks while editing
#+BEGIN_SRC emacs-lisp
  (setq org-src-fontify-natively t)
#+END_SRC
** Set a dark background for source blocks
#+BEGIN_SRC emacs-lisp
  (require 'color)
  (if (display-graphic-p)
      (set-face-attribute 'org-block nil :background
                          (color-darken-name
                           (face-attribute 'default :background) 3)))

#+END_SRC
** Setup Org Agenda
#+BEGIN_SRC emacs-lisp
  (define-key org-mode-map (kbd "C-c a") 'org-agenda)
#+END_SRC
** Setup Org Capture
#+BEGIN_SRC emacs-lisp
(setq org-default-notes-file (concat org-directory "/notes.org"))
(define-key global-map "\C-cc" 'org-capture)
#+END_SRC
** Add more states
#+BEGIN_SRC emacs-lisp
  (setq org-todo-keywords
        '((sequence "TODO(t)" "WAIT(w@/!)" "|" "DONE(d!)" "CANCELED(c@)")))
  (setq org-todo-keyword-faces
             '(("WAIT" . "yellow")
               ("CANCELED" . (:foreground "blue" :weight bold))))
#+END_SRC
** Enable =flyspell=
#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook 'flyspell-mode)
  (add-hook 'text-mode-hook 'flyspell-mode)
#+END_SRC
** Setup =org-babel=
   Get additional languages?
   Load them all
#+BEGIN_SRC emacs-lisp
  (org-babel-do-load-languages
   (quote org-babel-load-languages)
   (quote ((emacs-lisp . t)
           (dot . t)
           (plantuml . t)
           (python . t)
           (gnuplot . t)
           (shell . t)
           (ledger . t)
           (org . t)
           (latex . t)
           (haskell . t))))
#+END_SRC
** Enable =org-bullets=
Make org files a bit more readable
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :config (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+END_SRC
** Display images inline
#+BEGIN_SRC emacs-lisp
  (setq org-startup-with-inline-images t)
#+END_SRC
** Register more exports
#+BEGIN_SRC emacs-lisp
  (require 'ox-md)
#+END_SRC
** Setup quick access to org files
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "<f5>") 'org-find-file)
#+END_SRC
** Use =org-journal=
#+BEGIN_SRC emacs-lisp
  (use-package org-journal
    :custom (org-journal-dir "~/org/journal" "Set journal location"))
#+END_SRC
** Prevent editing invisible text
#+BEGIN_SRC emacs-lisp
  (setq org-catch-invisible-edits 'show-and-error)
#+END_SRC

* Register RSS feeds
Uses =elfeed= and =elfeed-org=
#+BEGIN_SRC emacs-lisp
(use-package elfeed
  :bind ("C-x w" . elfeed))

(use-package elfeed-org
  :config
  (setq rmh-elfeed-org-files (list (concat config-load-path "elfeed.org")))
  (elfeed-org))
#+END_SRC
The last line uses the [[file:elfeed.org][elfeed.org]] file to register the feeds.


* Startup behavior
** Toggle fullscreen by default
#+BEGIN_SRC emacs-lisp
(toggle-frame-maximized)
#+END_SRC
** Disable the big fat toolbars
#+BEGIN_SRC emacs-lisp
(tool-bar-mode -1)
(menu-bar-mode -1)
#+END_SRC
** Disable the scroll bar
#+BEGIN_SRC emacs-lisp
(scroll-bar-mode -1)
#+END_SRC
** Disable splash screen
And set it in emacs-lisp mode
#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-message t)
(setq initial-major-mode 'emacs-lisp-mode)
#+END_SRC
** Empty Scratch buffer
#+BEGIN_SRC emacs-lisp
(setq initial-scratch-message nil)
#+END_SRC
* Window behavior
** Disable the bell
Aweful atrocious noise on Windows
#+BEGIN_SRC emacs-lisp
(setq visible-bell 1)
#+END_SRC

** Adjust scrolling behavior
#+BEGIN_SRC emacs-lisp
  (setq mouse-wheel-scroll-amount '(1 ((shift) . 1))) ;; one line at a time
  (setq mouse-wheel-progressive-speed nil) ;; don't accelerate scrolling
  (setq auto-window-vscroll nil)
#+END_SRC

** Always ask for confirmation before quitting
#+BEGIN_SRC emacs-lisp
(setq confirm-kill-emacs 'y-or-n-p)
#+END_SRC

** Highlight the current line
#+BEGIN_SRC emacs-lisp
(when window-system
  (global-hl-line-mode))
#+END_SRC

** Use the back/forward mouse keys
#+BEGIN_SRC emacs-lisp
  (global-set-key [mouse-8] 'switch-to-prev-buffer)
  (global-set-key [mouse-9] 'switch-to-next-buffer)
#+END_SRC

* Better defaults
Inspired from [[https://github.com/technomancy/better-defaults]]

** Replace dabbrev with hippie-expand
#+BEGIN_SRC emacs-lisp
  (use-package dabbrev
    :diminish abbrev-mode)
  (global-set-key (kbd "M-/") 'hippie-expand)
#+END_SRC

** Replace isearch with regexp search
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-s") 'isearch-forward-regexp)
(global-set-key (kbd "C-r") 'isearch-backward-regexp)
(global-set-key (kbd "C-M-s") 'isearch-forward)
(global-set-key (kbd "C-M-r") 'isearch-backward)
#+END_SRC

** Save all backup files to a common folder
#+BEGIN_SRC emacs-lisp
(setq backup-directory-alist `(("." . ,(concat user-emacs-directory
                                               "backups"))))
#+END_SRC

** Replace 'yes/no' by just 'y/n
#+BEGIN_SRC emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC

** Auto reload tags
#+BEGIN_SRC emacs-lisp
(setq tags-revert-without-query 1)
#+END_SRC

** Disable warning for =narrow-to=region=
#+BEGIN_SRC emacs-lisp
  (put 'narrow-to-region 'disabled nil)
#+END_SRC
** Bind the mac command to control
#+begin_src emacs-lisp
  (setq mac-command-modifier 'control)
#+end_src


* Load Cool Theme
#+BEGIN_SRC emacs-lisp
  (use-package dracula-theme
    :config (load-theme 'dracula t)
    (set-face-background 'mode-line "#510370")
    (set-face-background 'mode-line-inactive "#212020"))
#+END_SRC

* Customize the mode-line
** A small trim of the original
#+BEGIN_SRC emacs-lisp
  (setq-default mode-line-format '("%e"
                                   mode-line-front-space
                                   " "
                                   mode-line-modified
                                   " "
                                   "%[" mode-line-buffer-identification "%]"
                                   "   "
                                   "L%l"
                                   "  "
                                   mode-line-modes
                                   mode-line-misc-info
                                   projectile-mode-line
                                   " "
                                   (:propertize " " display ((space :align-to (- right 14)))) ;; push to the right side
                                   (vc-mode vc-mode)
                                   mode-line-end-spaces))
#+END_SRC
** Load Tarsius' minions
#+BEGIN_SRC emacs-lisp
  (use-package minions
    :config (minions-mode 1))
#+END_SRC

* Fonts
Use the Hack font from [[https://github.com/chrissimpkins/Hack][chrissimpkins]]
#+BEGIN_SRC emacs-lisp
  (if (condition-case nil
          (x-list-fonts "Hack")
        (error nil))
      (progn
        (add-to-list 'default-frame-alist '(font . "Hack"))
        (set-face-attribute 'default nil :font "Hack")))
#+END_SRC

* Terminal Configuration
Trying to make it adapt to the OS.
There is surely a better way to do this.
#+BEGIN_SRC emacs-lisp
(if (eq system-type 'windows-nt)
    (progn
      (setenv "PATH" (concat "C:\\cygwin64\\bin\\"
                             path-separator
                             (getenv "PATH")))
      )
  (progn
    (use-package exec-path-from-shell
      :config (exec-path-from-shell-copy-env "PATH"))
    )
  )
#+END_SRC


* Dictionary Configuration
Because Windows sucks I have to do this to use =flyspell=
#+BEGIN_SRC emacs-lisp
  (if (eq system-type 'windows-nt)
      (progn
        (add-to-list 'exec-path "C:/Aspell/bin/")
        (setq ispell-program-name "aspell")
        (require 'ispell)))
#+END_SRC

* Snippets
I use =yasnippet= a lot.
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :diminish yas-minor-mode
    :config (yas-global-mode 1))
#+END_SRC
And also my package =org-sync-snippets= to keep my snippets into a single file under version control
#+BEGIN_SRC emacs-lisp
  (use-package org-sync-snippets
    :config (setq org-sync-snippets-org-snippets-file
                  (concat (file-name-as-directory config-load-path) "snippets.org")))
#+END_SRC


* Code Format
** Default tab and indetation
#+BEGIN_SRC emacs-lisp
(setq-default indent-tabs-mode nil)
(setq-default tab-width 4)
(setq tab-width 4)
#+END_SRC
** Add a new line at the end of files
#+BEGIN_SRC emacs-lisp
(setq require-final-newline t)
#+END_SRC
** Delete trailing white spaces on save
#+BEGIN_SRC emacs-lisp
(add-hook 'before-save-hook 'delete-trailing-whitespace)
#+END_SRC
** Set Unix file coding system
#+BEGIN_SRC emacs-lisp
  (setq-default buffer-file-coding-system 'utf-8-unix)
  (setq-default default-buffer-file-coding-system 'utf-8-unix)
  (set-default-coding-systems 'utf-8-unix)
  (prefer-coding-system 'utf-8-unix)
#+END_SRC
** Automatically indent yanked code
Thanks to [[https://github.com/magnars/.emacs.d/blob/master/defuns/editing-defuns.el#L99-L124][magnars]]
#+BEGIN_SRC emacs-lisp
  (defvar yank-indent-modes '(php-mode js2-mode)
    "Modes in which to indent regions that are yanked (or yank-popped)")

  (defvar yank-advised-indent-threshold 1000
    "Threshold (# chars) over which indentation does not automatically occur.")

  (defun yank-advised-indent-function (beg end)
    "Do indentation, as long as the region isn't too large."
    (if (<= (- end beg) yank-advised-indent-threshold)
        (indent-region beg end nil)))

  (defadvice yank (after yank-indent activate)
    "If current mode is one of 'yank-indent-modes, indent yanked text (with prefix arg don't indent)."
    (if (and (not (ad-get-arg 0))
             (--any? (derived-mode-p it) yank-indent-modes))
        (let ((transient-mark-mode nil))
          (yank-advised-indent-function (region-beginning) (region-end)))))

  (defadvice yank-pop (after yank-pop-indent activate)
    "If current mode is one of 'yank-indent-modes, indent yanked text (with prefix arg don't indent)."
    (if (and (not (ad-get-arg 0))
             (member major-mode yank-indent-modes))
        (let ((transient-mark-mode nil))
          (yank-advised-indent-function (region-beginning) (region-end)))))

  (defun yank-unindented ()
    (interactive)
    (yank 1))
#+END_SRC
** Define comment syntax
#+BEGIN_SRC emacs-lisp
  (setq comment-start "#")
#+END_SRC
** Enable =poporg=
   So I can comment code from an org-mode buffer
   #+begin_src emacs-lisp
     (use-package poporg
       :bind (("C-c '" . poporg-dwim)))
   #+end_src
** Enable =prog-fill=
#+BEGIN_SRC emacs-lisp
  (use-package prog-fill
    :bind (("M-q" . prog-fill)))
#+END_SRC
* Parenthesis Support
#+BEGIN_SRC emacs-lisp
(show-paren-mode 1)
(electric-pair-mode 1)
#+END_SRC

* Package management
** Enable =paradox=
#+BEGIN_SRC emacs-lisp
  (use-package paradox
    :custom
    (paradox-execute-asynchronously t)
    :config
    (paradox-enable))
#+END_SRC

* Internal Doc Enhancement
** Setup =helpful= for prettier doc
#+BEGIN_SRC emacs-lisp
  (use-package helpful
    :bind (("C-h f" . helpful-callable)
           ("C-h v" . helpful-variable)
           ("C-h k" . helpful-key)
           ("C-h F" . helpful-function)
           ("C-h C" . helpful-command)))
#+END_SRC
** Setup =elisp-demos= for code example
#+BEGIN_SRC emacs-lisp
  (use-package elisp-demos
    :config (advice-add 'helpful-update
                        :after #'elisp-demos-advice-helpful-update))
#+END_SRC

* Navigation
** Enable =avy=
#+BEGIN_SRC emacs-lisp
  (use-package avy
    :bind (("C-c SPC" . avy-goto-char-2)
           ("M-g f" . avy-goto-line)
           ("M-g w" . avy-goto-word-1)))
#+END_SRC

** Enable =win-switch=
Super nice to switch between frames and buffers
#+BEGIN_SRC emacs-lisp
(use-package win-switch
  :bind ("C-x o" . win-switch-dispatch)
  :config
  (setq win-switch-provide-visual-feedback t)
  (setq win-switch-feedback-background-color "purple")
  (setq win-switch-feedback-foreground-color "white")
  (win-switch-setup-keys-default))
#+END_SRC

** Enable =which-key=
Very nice if you don't have a cheat sheet at hand
#+BEGIN_SRC emacs-lisp
(use-package which-key
  :diminish which-key-mode
  :config (which-key-mode 1))
#+END_SRC

** Enable =winner-mode=
#+BEGIN_SRC emacs-lisp
(winner-mode 1)
#+END_SRC
** Enable =smooth-scrolling=
But with a margin of 5
#+BEGIN_SRC emacs-lisp
(use-package smooth-scrolling
  :config
  (smooth-scrolling-mode 1)
  (setq smooth-scroll-margin 5))
#+END_SRC

** Enable =neotree=
#+BEGIN_SRC emacs-lisp
(use-package neotree)
#+END_SRC
** Enable =ibuffer=
#+BEGIN_SRC emacs-lisp
(use-package ibuffer-vc)
(use-package ibuffer-git)
(define-key global-map (kbd "C-x C-b") 'ibuffer)
#+END_SRC
** Enable =yascroll=
So much better than the default scroll bar
#+BEGIN_SRC emacs-lisp
(use-package yascroll
  :config (global-yascroll-bar-mode 1))
#+END_SRC
** Enable =minimap=
Not all the time, but handy.
#+BEGIN_SRC emacs-lisp
(use-package minimap
  :config
  (setq minimap-window-location "right")
  (setq minimap-major-modes '(prog-mode org-mode)))
#+END_SRC
** Enable =rotate=
#+BEGIN_SRC emacs-lisp
  (use-package rotate
    :config (global-set-key (kbd "C-|") 'rotate-layout))
#+END_SRC
** Enable =anzu=
#+BEGIN_SRC emacs-lisp
(use-package anzu
  :config (global-anzu-mode +1)
          (setq anzu-mode-lighter ""))
#+END_SRC
** Enable =hamburger-menu=
#+BEGIN_SRC emacs-lisp
  (use-package hamburger-menu
    :config (setq mode-line-front-space 'hamburger-menu-mode-line))
#+END_SRC
** Enable =origiami=
Great to fold text
#+BEGIN_SRC emacs-lisp
  (use-package origami
    :config
    (global-set-key (kbd "C-c n o") 'origami-open-node)
    (global-set-key (kbd "C-c n c") 'origami-close-node)
    (global-set-key (kbd "C-c n a") 'origami-open-all-nodes)
    (global-set-key (kbd "C-c n u") 'origami-undo)
    (global-set-key (kbd "C-c n n") 'origami-show-only-node)
    (global-set-key (kbd "C-c n TAB") 'origami-recursively-toggle-node))
#+END_SRC
** Enable =eyebrowse=
To manage window configuration
#+BEGIN_SRC emacs-lisp
  (use-package eyebrowse
    :config (eyebrowse-mode t))
#+END_SRC
* Edition
** Enable =multiple-cursors=
Useful to edit multiple similar lines
#+BEGIN_SRC emacs-lisp
(use-package multiple-cursors
  :bind (("C-S-c C-S-c" . mc/edit-lines)
         ("C->" . mc/mark-next-like-this)
         ("C-<" . mc/mark-previous-like-this)
         ("C-c C-<" . mc/mark-all-like-this)
         ("C-S-<mouse-1>" . mc/add-cursor-on-click)))
#+END_SRC

** Enable =zzz-to-char=
#+BEGIN_SRC emacs-lisp
(use-package zzz-to-char
  :bind ("M-z" . zzz-up-to-char))
#+END_SRC
** Enable =whole-line-or-region=
#+BEGIN_SRC emacs-lisp
  (use-package whole-line-or-region
    :diminish whole-line-or-region-global-mode
    :config (whole-line-or-region-global-mode t))
#+END_SRC
** Enable =viking-mode=
And add my personal twist to it.
#+BEGIN_SRC emacs-lisp
  (use-package viking-mode
    :diminish viking-mode
    :config
    (viking-global-mode)
    (setq viking-greedy-kill nil)
    (setq viking-enable-region-kill t)
    (setq viking-kill-functions (list '(lambda()
                                         (if (region-active-p)
                                             (kill-region (region-beginning) (region-end))
                                         (delete-char 1 t)))
                                      '(lambda()
                                         (insert (pop kill-ring)) ;; insert the char back
                                         (kill-new "") ;; start a new entry in the kill-ring
                                         (viking-kill-word)
                                         (kill-append " " nil)) ;; append the extra space
                                      'viking-kill-line-from-point
                                      'viking-kill-line
                                      'viking-kill-paragraph
                                      'viking-kill-buffer)))
#+END_SRC

** Enable =undo-tree=
#+BEGIN_SRC emacs-lisp
(use-package undo-tree
  :diminish undo-tree-mode
  :config
  (global-undo-tree-mode t)
  (setq undo-tree-visualizer-diff t))
#+END_SRC

** Enable =volatile-highlights=
Sweet minor mode for providing visual feedback
#+BEGIN_SRC emacs-lisp
(use-package volatile-highlights
  :diminish volatile-highlights-mode
  :config
  (vhl/define-extension 'undo-tree 'undo-tree-yank 'undo-tree-move)
  (vhl/install-extension 'undo-tree)
  (volatile-highlights-mode t))
#+END_SRC

** Enable =ciel=
#+BEGIN_SRC emacs-lisp
(use-package ciel
  :bind (("C-c i" . ciel-ci)
         ("C-c o" . ciel-co)))
#+END_SRC

** Enable =fancy-narrow=
And use it to replace normal narrowing functions
#+BEGIN_SRC emacs-lisp
  (use-package fancy-narrow
    :diminish fancy-narrow-mode)
#+END_SRC
* General Code
** Enable =projectile=
And get a shorter modeline, thanks to [[https://github.com/purcell/emacs.d/blob/master/lisp/init-projectile.el#L10]]
#+BEGIN_SRC emacs-lisp
  (use-package ag)
  (use-package helm-ag)
  (setq projectile-go-function nil) ;; temporary workaround
  (use-package projectile
    :config
    (projectile-mode)
    (setq-default projectile-mode-line
     '(:eval
       (if (file-remote-p default-directory)
           " Proj"
         (format " Proj[%s]" (projectile-project-name)))))
    (add-to-list 'projectile-globally-ignored-directories "node_modules"))
#+END_SRC

With a twist of helm
#+BEGIN_SRC emacs-lisp
(use-package helm-projectile
  :bind (("C-c v" . helm-projectile)
         ("C-c C-v" . helm-projectile-ag)
         ("C-c w" . helm-projectile-switch-project)))
#+END_SRC

** Enable =company=
#+BEGIN_SRC emacs-lisp
  (use-package company
    :diminish company-mode
    :config
    (add-hook 'after-init-hook 'global-company-mode)
    (setq company-minimum-prefix-length 2)
    (setq company-dabbrev-downcase nil)
    (bind-keys :map company-active-map
               ("C-d" . company-show-doc-buffer)
               ("C-l" . company-show-location)
               ("C-n" . company-select-next)
               ("C-p" . company-select-previous)
               ("C-t" . company-select-next)
               ("C-s" . company-select-previous)
               ("TAB" . company-complete)))

  (use-package company-go)
#+END_SRC
** Enable =flycheck=
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :diminish flycheck-mode
    :config (flycheck-mode 1)
    (setq flycheck-phpcs-standard "PSR2")
    (add-hook 'python-mode-hook 'flycheck-mode)
    (add-hook 'emacs-lisp-mode-hook 'flycheck-mode)
    (add-hook 'json-mode-hook 'flycheck-mode)
    (add-hook 'rjsx-mode-hook 'flycheck-mode))
#+END_SRC

Add a little helm twist to it
#+BEGIN_SRC emacs-lisp
(use-package helm-flycheck
  :bind ("C-c f" . helm-flycheck))
#+END_SRC

** Enable =electric-operator=
And add a couple of rules for PHP and JS
#+BEGIN_SRC emacs-lisp
  (use-package electric-operator
    :config
    (electric-operator-add-rules-for-mode 'php-mode
                                          (cons " - >" "->"))
    (electric-operator-add-rules-for-mode 'php-mode
                                          (cons " / /" "// "))
    (electric-operator-add-rules-for-mode 'php-mode
                                          (cons " = > " " => "))
    (electric-operator-add-rules-for-mode 'php-mode
                                          (cons " < ?" "<?"))
    ;; (electric-operator-add-rules-for-mode 'js2-mode
    ;;                                       (cons " = > " " => "))
    ;; (electric-operator-add-rules-for-mode 'js2-jsx-mode
    ;;                                       (cons " = > " " => "))
    ;; (electric-operator-add-rules-for-mode 'rjsx-mode
    ;;                                       (cons " = > " " => "))
    )
#+END_SRC

** Enable =dumb-jump=
Great package to jump to definition
#+BEGIN_SRC emacs-lisp
  (use-package dumb-jump
    :config (setq dumb-jump-aggressive nil))
#+END_SRC

** Enable =highlight-numbers=
Make numbers in source code more noticeable
#+BEGIN_SRC emacs-lisp
  (use-package highlight-numbers
    :config (add-hook 'prog-mode-hook 'highlight-numbers-mode))
#+END_SRC
* Emacs Lisp
** Enable =eldoc=
#+BEGIN_SRC emacs-lisp
  (use-package eldoc
    :diminish eldoc-mode
    :config (add-hook 'emacs-lisp-mode-hook 'eldoc-mode))

#+END_SRC
** Enable =rainbow-delimiters=
But only for emacs-lisp
#+BEGIN_SRC emacs-lisp
(use-package rainbow-delimiters
  :config
  (add-hook 'emacs-lisp-mode-hook 'rainbow-delimiters-mode))
#+END_SRC
** Enable =paredit=
#+BEGIN_SRC emacs-lisp
(use-package paredit
  :config
  (add-hook 'emacs-lisp-mode-hook 'paredit-mode))
#+END_SRC
** Enable =eros=
#+BEGIN_SRC emacs-lisp
  (use-package eros
    :config (add-hook 'emacs-lisp-mode-hook 'eros-mode))
#+END_SRC
** Enable =simple-call-tree=
#+BEGIN_SRC emacs-lisp
  (use-package simple-call-tree)
#+END_SRC
** Enable =suggest=
#+BEGIN_SRC emacs-lisp
  (use-package suggest)
#+END_SRC
* MySQL
** Always make MySQL the default product
#+BEGIN_SRC emacs-lisp
(require 'sql)
(sql-set-product "mysql")
#+END_SRC
** Enable =sqlup-mode=
#+BEGIN_SRC emacs-lisp
(use-package sqlup-mode
  :config (add-hook 'sql-mode-hook 'sqlup-mode))
#+END_SRC
** Enable =mysql-to-org=
I love this package
#+BEGIN_SRC emacs-lisp
(use-package mysql-to-org
  :config
  (add-hook 'sql-mode-hook 'mysql-to-org-mode))
#+END_SRC
* PHP
** Enable =php-mode=
And a bunch of hooks with it
And set PSR-2 as coding style
#+BEGIN_SRC emacs-lisp
  (use-package php-mode
    :config
    (add-hook 'php-mode-hook 'flycheck-mode)
    (add-hook 'php-mode-hook 'electric-operator-mode)
    (add-hook 'php-mode-hook 'dumb-jump-mode)
    (add-hook 'php-mode-hook 'php-enable-psr2-coding-style))
#+END_SRC
** Enable =company-php=
#+BEGIN_SRC emacs-lisp
  (use-package company-php
    :config
    (add-hook 'php-mode-hook 'company-mode)
    (add-hook 'php-mode-hook '(lambda ()
                                (if (not (member 'php-mode company-dabbrev-code-modes))
                                    (add-to-list 'company-dabbrev-code-modes 'php-mode)))))
#+end_SRC
** Enable =php-eldoc=
#+BEGIN_SRC emacs-lisp
  (setq auto-complete-mode nil) ;; Hack while my PR is pending
  (use-package php-eldoc
    :diminish eldoc-mode
    :config (add-hook 'php-mode-hook 'php-eldoc-enable))
#+END_SRC
** Enable =phpcbf=
#+BEGIN_SRC emacs-lisp
  (use-package phpcbf
    :config (setq phpcbf-standard "PSR2"))
#+END_SRC

* Web
** Enable =web-mode=
So much better than =html-mode=
#+BEGIN_SRC emacs-lisp
  (use-package web-mode
    :mode "\\.phtml\\'"
    :mode "\\.volt\\'"
    :mode "\\.html\\'"
    :mode "\\.svelte\\'"
    :config
    (setq web-mode-markup-indent-offset 2)
    (setq web-mode-code-indent-offset 2)
    (setq web-mode-css-indent-offset 2))
#+END_SRC

** Enable =emmet-mode=
Adding the necessary hooks
#+BEGIN_SRC emacs-lisp
  (use-package emmet-mode
    :config
    (add-hook 'sgml-mode-hook 'emmet-mode) ;; Auto-start on any markup modes
    (add-hook 'css-mode-hook  'emmet-mode) ;; enable Emmet's css abbreviation.
    )
#+END_SRC

* Javascript
** Enable =js2-mode=
#+BEGIN_SRC emacs-lisp
  (use-package js2-mode
    :mode "\\.js\\'"
    :config
    (add-hook 'js2-mode-hook 'electric-operator-mode)
    (add-hook 'js2-mode-hook 'flycheck-mode)
    (setq js2-basic-offset 2))
#+END_SRC
** Enable =js2-refactor=
#+BEGIN_SRC emacs-lisp
  (use-package js2-refactor
    :diminish js2-refactor-mode
    :defer t
    :config
    (add-hook 'js2-mode-hook #'js2-refactor-mode)
    (js2r-add-keybindings-with-prefix "C-c C-m"))
#+END_SRC
** Enable =js-doc=
#+BEGIN_SRC emacs-lisp
  (use-package js-doc)
#+END_SRC
** Enable =rjsx-mode=
Useful for React
#+BEGIN_SRC emacs-lisp
  (use-package rjsx-mode)
#+END_SRC
** Enable =npm-mode=
#+begin_src emacs-lisp
  (use-package npm-mode
    :defer t
    :hook
    (js2-mode-hook  . npm-mode)
    (rjsx-mode-hook . npm-mode))
#+end_src
* Typescript
** Enable =tide=
#+BEGIN_SRC emacs-lisp
  (use-package tide)

  (defun setup-tide-mode ()
    (interactive)
    (tide-setup)
    (flycheck-mode +1)
    (setq flycheck-check-syntax-automatically '(save mode-enabled))
    (eldoc-mode +1)
    (tide-hl-identifier-mode +1)
    (company-mode +1))

  ;; formats the buffer before saving
  (add-hook 'before-save-hook 'tide-format-before-save)

  (add-hook 'typescript-mode-hook #'setup-tide-mode)
#+END_SRC
** Enable =tide= for =tsx=
#+begin_src emacs-lisp
  (use-package web-mode)
  (add-to-list 'auto-mode-alist '("\\.tsx\\'" . web-mode))
  (add-hook 'web-mode-hook
            (lambda ()
              (when (string-equal "tsx" (file-name-extension buffer-file-name))
                (setup-tide-mode))))
  ;; enable typescript-tslint checker
  (flycheck-add-mode 'typescript-tslint 'web-mode)
#+end_src
* Go
A lot of the config is based on gocode, godef, goimports and gotags
packages that you should install separately.
#+BEGIN_SRC bash :tangle no
  go get -u github.com/nsf/gocode
  go get -u github.com/rogpeppe/godef
  go get -u golang.org/x/tools/cmd/goimports
  go get -u github.com/jstemmer/gotags
  go get github.com/matryer/moq
#+END_SRC

** Enable =go-mode=
Absolutely necessary if working in Go
#+BEGIN_SRC emacs-lisp
  (use-package go-mode
    :config
    (add-hook 'before-save-hook #'gofmt-before-save)
    (add-hook 'go-mode-hook 'flycheck-mode)
    (add-hook 'go-mode-hook 'dumb-jump-mode)
    (setq go-packages-function 'go-packages-go-list)
    :bind
    (:map go-mode-map ("M-." . godef-jump)))
#+END_SRC

** Enable =company-go=
#+BEGIN_SRC emacs-lisp
  (use-package company-go
    :config
    (add-hook 'go-mode-hook 'company-mode)
    (add-to-list 'company-backends 'company-go))
#+END_SRC

** Enable =go-stackstracer=
#+BEGIN_SRC emacs-lisp
  (use-package go-stacktracer)
#+END_SRC

** Enable =go-add-tags=
#+BEGIN_SRC emacs-lisp
  (use-package go-add-tags)
#+END_SRC

** Enable =go-eldoc=
#+BEGIN_SRC emacs-lisp
  (use-package go-eldoc
    :diminish eldoc-mode
    :config (add-hook 'go-mode-hook 'go-eldoc-setup))
#+END_SRC

** Enable =go-gopath=
#+BEGIN_SRC emacs-lisp
  (use-package go-gopath)
#+END_SRC

** Enable =go-direx=
#+BEGIN_SRC emacs-lisp
  (use-package go-direx)
#+END_SRC

** Enable =gotest=
#+BEGIN_SRC emacs-lisp
  (use-package gotest)
#+END_SRC

** Integrate =moq=
Quick custom function to integrate with the moq tool to generate quick mocks
#+BEGIN_SRC emacs-lisp
  (defun moq ()
    (interactive)
    (let ((interface (word-at-point))
          (test-file (concat (downcase (word-at-point)) "_test.go")))
      (shell-command
       (concat "moq -out " test-file " . " interface))
      (find-file test-file)))
#+END_SRC
** See test coverage faster
Simple function to see the test coverage of the current open buffer
#+BEGIN_SRC emacs-lisp
    (defun go-coverage-here ()
      (interactive)
      (shell-command "go test . -coverprofile=cover.out")
      (go-coverage "cover.out")
      (rotate:even-horizontal))
#+END_SRC
** Update dependency under cursor
Not the best code but will do the trick with =dep=
#+begin_src emacs-lisp
  (defun go-dep-update ()
    (interactive)
    (beginning-of-line)
    (re-search-forward "\\(github.com\/[^\/]+\/[^\/]+\\)")
    (let ((repo (match-string 0)))
      (async-shell-command (format "dep ensure -v -update %s" repo) "*dep update*")))
#+end_src

** Prevent modula major mode for =go.mod= files
#+begin_src emacs-lisp
  (setq auto-mode-alist
        (append '(("go.mod" . text-mode)) auto-mode-alist))
#+end_src
* Python
** Setup =python-mode=
Need to install IPython first with =pip install ipython=.
Assuming that it would be at least IPython 5 so ask for =simple-prompt=.
#+BEGIN_SRC emacs-lisp
  (add-hook 'python-mode-hook 'electric-operator-mode)
  (setq python-shell-interpreter "ipython"
        python-shell-interpreter-args "--simple-prompt -i")
#+END_SRC
** Enable =company-jedi=
#+BEGIN_SRC emacs-lisp
  (use-package company-jedi
    :config (add-to-list 'company-backends 'company-jedi))
#+END_SRC
** Custom functions for pipenv
#+BEGIN_SRC emacs-lisp
  (defun pipenv-activate ()
    (interactive)
    (pythonic-activate (shell-command-to-string "pipenv --venv")))

  (defun pipenv-deactivate ()
    (interactive)
    (pythonic-deactivate))
#+END_SRC
* Docker
** Setup =Dockerfile-mode=
#+BEGIN_SRC emacs-lisp
  (use-package dockerfile-mode
    :mode "Dockerfile\\'")
#+END_SRC
* Logs
** Enable =syslog-mode=
#+BEGIN_SRC emacs-lisp
  ;; (use-package syslog-mode)
#+END_SRC
** Turn on =auto-revert-tail-mode= for log files
#+BEGIN_SRC emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.log\\'" . auto-revert-tail-mode))
#+END_SRC
** Quickly check syslog
#+BEGIN_SRC emacs-lisp
  (defun open-syslog ()
    (interactive)
    (find-file "/var/log/syslog")
    ;; (syslog-mode)
    (goto-char (point-max)))
#+END_SRC
* Eshell
** Configuration
#+BEGIN_SRC emacs-lisp
  (use-package eshell
    :init
    (setq eshell-scroll-to-bottom-on-input 'all
          eshell-error-if-no-glob t
          eshell-hist-ignoredups t
          eshell-save-history-on-exit t
          eshell-prefer-lisp-functions nil
          eshell-destroy-buffer-when-process-dies t))
#+END_SRC
** Fancy prompt
Modified from https://www.reddit.com/r/emacs/comments/6f0rkz/my_fancy_eshell_prompt/
#+BEGIN_SRC emacs-lisp
  (setq eshell-prompt-function
        (lambda ()
          (concat
           (propertize "┌─[" 'face `(:foreground "green"))
           (propertize (user-login-name) 'face `(:foreground "red"))
           (propertize "@" 'face `(:foreground "green"))
           (propertize (system-name) 'face `(:foreground "lightblue"))
           (propertize "]──[" 'face `(:foreground "green"))
           (propertize (format-time-string "%H:%M" (current-time)) 'face `(:foreground "yellow"))
           (propertize "]──[" 'face `(:foreground "green"))
           (propertize (concat (eshell/pwd)) 'face `(:foreground "white"))
           (propertize "]\n" 'face `(:foreground "green"))
           (propertize "└─>" 'face `(:foreground "green"))
           (propertize (if (= (user-uid) 0) " # " " $ ") 'face `(:foreground "green"))
           )))
#+END_SRC
** Define visual commands and subcommands
#+BEGIN_SRC emacs-lisp
  (setq eshell-visual-commands '("htop" "vi" "screen" "top" "less"
                                 "more" "lynx" "ncftp" "pine" "tin" "trn" "elm"
                                 "vim"))

  (setq eshell-visual-subcommands '("git" "log" "diff" "show" "ssh"))
#+END_SRC
** Pager setup
#+BEGIN_SRC emacs-lisp
  (setenv "PAGER" "cat")
#+END_SRC
** Enable autojump
#+BEGIN_SRC emacs-lisp
  (use-package eshell-autojump)
#+END_SRC
** Aliases
#+BEGIN_SRC emacs-lisp
  (defalias 'ff 'find-file)
  (defalias 'd 'dired)
#+END_SRC
** Extra shell functions
*** Clear function
#+BEGIN_SRC emacs-lisp
  (defun eshell/clear ()
    (let ((inhibit-read-only t))
      (erase-buffer)))
#+END_SRC
*** Git
#+BEGIN_SRC emacs-lisp
  (defun eshell/gst (&rest args)
      (magit-status (pop args) nil)
      (eshell/echo))   ;; The echo command suppresses output
#+END_SRC
*** Bargs and Sargs
Thanks to http://www.howardism.org/Technical/Emacs/eshell-present.html
#+BEGIN_SRC emacs-lisp
  (defun eshell/-buffer-as-args (buffer separator command)
    "Takes the contents of BUFFER, and splits it on SEPARATOR, and
  runs the COMMAND with the contents as arguments. Use an argument
  `%' to substitute the contents at a particular point, otherwise,
  they are appended."
    (let* ((lines (with-current-buffer buffer
                    (split-string
                     (buffer-substring-no-properties (point-min) (point-max))
                     separator)))
           (subcmd (if (-contains? command "%")
                       (-flatten (-replace "%" lines command))
                     (-concat command lines)))
           (cmd-str  (string-join subcmd " ")))
      (message cmd-str)
      (eshell-command-result cmd-str)))

  (defun eshell/bargs (buffer &rest command)
    "Passes the lines from BUFFER as arguments to COMMAND."
    (eshell/-buffer-as-args buffer "\n" command))

  (defun eshell/sargs (buffer &rest command)
    "Passes the words from BUFFER as arguments to COMMAND."
    (eshell/-buffer-as-args buffer nil command))
#+END_SRC
*** Close
#+BEGIN_SRC emacs-lisp
  (defun eshell/close ()
    (delete-window))
#+END_SRC
** Smoother bindings
#+BEGIN_SRC emacs-lisp
  (add-hook 'eshell-mode-hook
            (lambda ()
              (define-key eshell-mode-map (kbd "C-M-a") 'eshell-previous-prompt)
              (define-key eshell-mode-map (kbd "C-M-e") 'eshell-next-prompt)
              (define-key eshell-mode-map (kbd "M-r") 'helm-eshell-history)))
#+END_SRC
** Close window on exit
#+BEGIN_SRC emacs-lisp
  (defun eshell-pop--kill-and-delete-window ()
    (unless (one-window-p)
      (delete-window)))

  (add-hook 'eshell-exit-hook 'eshell-pop--kill-and-delete-window)
#+END_SRC
* Dired
** Enable =dired-x=
#+BEGIN_SRC emacs-lisp
  (require 'dired-x)
#+END_SRC
** Use human-readable sizes
#+BEGIN_SRC emacs-lisp
  (setq dired-listing-switches "-alh")
#+END_SRC
* YAML
** Enable =yaml-mode=
#+BEGIN_SRC emacs-lisp
  (use-package yaml-mode
    :config
    (add-hook 'yaml-mode-hook 'flycheck-mode)
    (add-hook 'yaml-mode-hook 'flyspell-mode))
#+END_SRC
** Enable =flycheck-yamllint=
#+BEGIN_SRC emacs-lisp
  (use-package flycheck-yamllint
    :defer t
    :init
    (progn
      (eval-after-load 'flycheck
        '(add-hook 'flycheck-mode-hook 'flycheck-yamllint-setup))))
#+END_SRC
** Enable indentation highlight
#+BEGIN_SRC emacs-lisp
  (use-package highlight-indentation
    :config
    (set-face-background 'highlight-indentation-face "#8B6090")
    (add-hook 'yaml-mode-hook 'highlight-indentation-mode))
#+END_SRC
* Restclient
** Setup =restclient=
#+BEGIN_SRC emacs-lisp
  (use-package restclient
    :mode ("\\.restclient\\'" . restclient-mode))
#+END_SRC
** Enable =company-restclient=
#+BEGIN_SRC emacs-lisp
  (use-package company-restclient
    :config (add-to-list 'company-backends 'company-restclient))
#+END_SRC
** Integrate to =org-mode=
#+BEGIN_SRC emacs-lisp
  (use-package ob-restclient)
#+END_SRC
* PlantUML
** Enable =plantuml-mode=
#+BEGIN_SRC emacs-lisp
  (use-package plantuml-mode)
#+END_SRC
** Download and hook up plantuml.jar
#+BEGIN_SRC emacs-lisp
  (let ((plantuml-directory (concat config-load-path "extra/"))
        (plantuml-link "https://superb-dca2.dl.sourceforge.net/project/plantuml/plantuml.jar"))
    (let ((plantuml-target (concat plantuml-directory "plantuml.jar")))
      (if (not (f-exists? plantuml-target))
          (progn (message "Downloading plantuml.jar")
                 (shell-command
                  (mapconcat 'identity (list "wget" plantuml-link "-O" plantuml-target) " "))
                 (kill-buffer "*Shell Command Output*")))
      (setq org-plantuml-jar-path plantuml-target)))
#+END_SRC
* Redis
A few utility functions for my local Redis.
#+begin_src emacs-lisp
  (defun redis--command (cmd)
    "Format command for the redis-cli.

  CMD is the redis command."
    (format "echo \"%s\" | redis-cli" cmd))

  (defun redis--select-key ()
    "Return all redis keys as list."
    (let* ((command (redis--command "KEYS *"))
           (keys (split-string (shell-command-to-string command) "\n")))
      (completing-read "Redis key: " keys)))

  (defun redis-set-key (key value)
    "Set a key value pair in redis.

  KEY is the key.
  VALUE is the value."
    (interactive "sKey: \nsValue: ")
    (shell-command (redis--command (format "SET %s %s" key value))))

  (defun redis-get-key ()
    "Get the value for a key in redis."
    (interactive)
    (let ((key (redis--select-key)))
      (message
       "Value: %s"
       (replace-regexp-in-string "\n" "" (shell-command-to-string (redis--command (format "GET %s" key)))))))

  (defun redis-delete-key ()
    "Delete a key from local redis instance."
    (interactive)
    (let ((key (redis--select-key)))
      (shell-command (redis--command (format "DEL %s" key)))
      (message "Key %s deleted." key)))

  (defun redis-set-expire (ttl)
    "Set ttl from local redis instance."
    (interactive "nExpiry in seconds: ")
    (let ((key (redis--select-key)))
      (shell-command (redis--command (format "EXPIRE %s %s" key ttl)))))
#+end_src
* Extra Packages
No need to configure, just handy to have.
#+BEGIN_SRC emacs-lisp
  (use-package 2048-game)
  (use-package isend-mode)
  (use-package lorem-ipsum)
  (use-package markdown-mode)
  (use-package pdf-tools
    :defer t)
  (use-package refine)
  (use-package request)
  (use-package csv-mode)
  ;; (use-package csharp-mode)
  (use-package keychain-environment)
  (use-package prodigy)
  (use-package vlf)
  (use-package helm-flyspell)
  (use-package kubel)
  (use-package kubernetes-helm)
  (use-package mermaid-mode)
  (use-package todoist)
  (use-package protobuf-mode)
#+END_SRC

* Extra file loading
If I am working on a separate library, I like to have it loaded on start.
Just need to place it in the extra folder.
#+BEGIN_SRC emacs-lisp
  (mapc #'load (directory-files (concat config-load-path "extra/") t "\\.el$"))
#+END_SRC


* Key Frequency
Trying the =keyfreq= package to monitor my command usage
#+BEGIN_SRC emacs-lisp
  (use-package keyfreq
    :config
    (keyfreq-mode 1)
    (keyfreq-autosave-mode 1))
#+END_SRC
* Cheat Sheet
Thanks to the =cheatsheet= package, I can quickly see what are my favorite keys bindings
#+INCLUDE: "./cheatsheet.org"
